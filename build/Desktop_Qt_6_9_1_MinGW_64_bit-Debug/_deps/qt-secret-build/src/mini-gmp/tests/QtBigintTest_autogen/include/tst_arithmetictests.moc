/****************************************************************************
** Meta object code from reading C++ file 'tst_arithmetictests.cpp'
**
** Created by: The Qt Meta Object Compiler version 69 (Qt 6.9.1)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qmetatype.h>

#include <QtCore/qtmochelpers.h>

#include <memory>


#include <QtCore/qxptype_traits.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_arithmetictests.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 69
#error "This file was generated using the moc from 6.9.1. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
QT_WARNING_DISABLE_GCC("-Wuseless-cast")
namespace {
struct qt_meta_tag_ZN15arithmetictestsE_t {};
} // unnamed namespace

template <> constexpr inline auto arithmetictests::qt_create_metaobjectdata<qt_meta_tag_ZN15arithmetictestsE_t>()
{
    namespace QMC = QtMocConstants;
    QtMocHelpers::StringRefStorage qt_stringData {
        "arithmetictests",
        "arithmeticAssignmentAdditionTest",
        "",
        "arithmeticAssignmentSubtractionTest",
        "arithmeticAssignmentMultiplicationTest",
        "arithmeticAssignmentDivisionTest",
        "arithmeticAssignmentModuloTest",
        "binaryArithmeticWithIntStrBigTest",
        "binaryArithmeticWith0Test",
        "binaryArithmeticAddSubTest",
        "binaryArithmeticDivModTest",
        "binaryArithmeticBigTest",
        "binaryArithmeticSubtractionBigTest",
        "binaryArithmeticMultiplicationBigTest",
        "binaryArithmeticBaseDivTest",
        "binaryArithmeticBigDivTest",
        "binaryArithmeticBaseModTest",
        "binaryArithmeticBigModTest",
        "incrementTest",
        "decrementTest",
        "relationalOperatorsTest",
        "relationalOperatorsBigIntsTest",
        "shiftingTest",
        "binTest",
        "testOperators",
        "constructorsTest"
    };

    QtMocHelpers::UintData qt_methods {
        // Slot 'arithmeticAssignmentAdditionTest'
        QtMocHelpers::SlotData<void()>(1, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'arithmeticAssignmentSubtractionTest'
        QtMocHelpers::SlotData<void()>(3, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'arithmeticAssignmentMultiplicationTest'
        QtMocHelpers::SlotData<void()>(4, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'arithmeticAssignmentDivisionTest'
        QtMocHelpers::SlotData<void()>(5, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'arithmeticAssignmentModuloTest'
        QtMocHelpers::SlotData<void()>(6, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'binaryArithmeticWithIntStrBigTest'
        QtMocHelpers::SlotData<void()>(7, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'binaryArithmeticWith0Test'
        QtMocHelpers::SlotData<void()>(8, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'binaryArithmeticAddSubTest'
        QtMocHelpers::SlotData<void()>(9, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'binaryArithmeticDivModTest'
        QtMocHelpers::SlotData<void()>(10, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'binaryArithmeticBigTest'
        QtMocHelpers::SlotData<void()>(11, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'binaryArithmeticSubtractionBigTest'
        QtMocHelpers::SlotData<void()>(12, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'binaryArithmeticMultiplicationBigTest'
        QtMocHelpers::SlotData<void()>(13, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'binaryArithmeticBaseDivTest'
        QtMocHelpers::SlotData<void()>(14, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'binaryArithmeticBigDivTest'
        QtMocHelpers::SlotData<void()>(15, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'binaryArithmeticBaseModTest'
        QtMocHelpers::SlotData<void()>(16, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'binaryArithmeticBigModTest'
        QtMocHelpers::SlotData<void()>(17, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'incrementTest'
        QtMocHelpers::SlotData<void()>(18, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'decrementTest'
        QtMocHelpers::SlotData<void()>(19, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'relationalOperatorsTest'
        QtMocHelpers::SlotData<void()>(20, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'relationalOperatorsBigIntsTest'
        QtMocHelpers::SlotData<void()>(21, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'shiftingTest'
        QtMocHelpers::SlotData<void()>(22, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'binTest'
        QtMocHelpers::SlotData<void()>(23, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testOperators'
        QtMocHelpers::SlotData<void()>(24, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'constructorsTest'
        QtMocHelpers::SlotData<void()>(25, 2, QMC::AccessPrivate, QMetaType::Void),
    };
    QtMocHelpers::UintData qt_properties {
    };
    QtMocHelpers::UintData qt_enums {
    };
    return QtMocHelpers::metaObjectData<arithmetictests, qt_meta_tag_ZN15arithmetictestsE_t>(QMC::MetaObjectFlag{}, qt_stringData,
            qt_methods, qt_properties, qt_enums);
}
Q_CONSTINIT const QMetaObject arithmetictests::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_staticMetaObjectStaticContent<qt_meta_tag_ZN15arithmetictestsE_t>.stringdata,
    qt_staticMetaObjectStaticContent<qt_meta_tag_ZN15arithmetictestsE_t>.data,
    qt_static_metacall,
    nullptr,
    qt_staticMetaObjectRelocatingContent<qt_meta_tag_ZN15arithmetictestsE_t>.metaTypes,
    nullptr
} };

void arithmetictests::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    auto *_t = static_cast<arithmetictests *>(_o);
    if (_c == QMetaObject::InvokeMetaMethod) {
        switch (_id) {
        case 0: _t->arithmeticAssignmentAdditionTest(); break;
        case 1: _t->arithmeticAssignmentSubtractionTest(); break;
        case 2: _t->arithmeticAssignmentMultiplicationTest(); break;
        case 3: _t->arithmeticAssignmentDivisionTest(); break;
        case 4: _t->arithmeticAssignmentModuloTest(); break;
        case 5: _t->binaryArithmeticWithIntStrBigTest(); break;
        case 6: _t->binaryArithmeticWith0Test(); break;
        case 7: _t->binaryArithmeticAddSubTest(); break;
        case 8: _t->binaryArithmeticDivModTest(); break;
        case 9: _t->binaryArithmeticBigTest(); break;
        case 10: _t->binaryArithmeticSubtractionBigTest(); break;
        case 11: _t->binaryArithmeticMultiplicationBigTest(); break;
        case 12: _t->binaryArithmeticBaseDivTest(); break;
        case 13: _t->binaryArithmeticBigDivTest(); break;
        case 14: _t->binaryArithmeticBaseModTest(); break;
        case 15: _t->binaryArithmeticBigModTest(); break;
        case 16: _t->incrementTest(); break;
        case 17: _t->decrementTest(); break;
        case 18: _t->relationalOperatorsTest(); break;
        case 19: _t->relationalOperatorsBigIntsTest(); break;
        case 20: _t->shiftingTest(); break;
        case 21: _t->binTest(); break;
        case 22: _t->testOperators(); break;
        case 23: _t->constructorsTest(); break;
        default: ;
        }
    }
    (void)_a;
}

const QMetaObject *arithmetictests::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *arithmetictests::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_staticMetaObjectStaticContent<qt_meta_tag_ZN15arithmetictestsE_t>.strings))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int arithmetictests::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 24)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 24;
    }
    if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 24)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 24;
    }
    return _id;
}
QT_WARNING_POP
